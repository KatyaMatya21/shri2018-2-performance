var gulp = require('gulp');
var cssmin = require('gulp-cssmin');
var uglify = require('gulp-uglify');
var imagemin = require('gulp-imagemin');
var htmlmin = require('gulp-htmlmin');
var gulpSequence = require('gulp-sequence');
var autoprefixer = require('gulp-autoprefixer');
var rename = require('gulp-rename');
var babel = require("gulp-babel");
var del = require('del');
var inlinesource = require('gulp-inline-source');
const imageminWebp = require('imagemin-webp');
var fontmin = require('gulp-fontmin');
var git = require('gulp-git');

function minifyFont(text, cb) {
  gulp
    .src('./fonts/*.woff')
    .pipe(fontmin({
      hinting: false,
      text: text
    }))
    .pipe(gulp.dest('docs/fonts'));
}

gulp.task('html', function () {
  return gulp.src('./index.html')
    .pipe(htmlmin({
      collapseWhitespace: false,
      includeAutoGeneratedTags: false
    }))
    .pipe(inlinesource())
    .pipe(gulp.dest('./docs'))
});

gulp.task('fonts', function () {
  return gulp.src('./fonts/*.woff')
    .pipe(fontmin({
      hinting: false,
      text: '',
    }))
    .pipe(gulp.dest('./docs/fonts'));

  /*var buffers = [];

  gulp
    .src('./index.html')
    .on('data', function(file) {
      buffers.push(file.contents);
    })
    .on('end', function() {
      var text = Buffer.concat(buffers).toString('utf-8');
      minifyFont(text);
    });*/

});

gulp.task('css', function () {
  return gulp.src('./styles.css')
    .pipe(autoprefixer({
      browsers: ['last 4 versions'],
      cascade: false
    }))
    .pipe(cssmin())
    .pipe(rename({suffix: '.min'}))
    .pipe(gulp.dest('./docs/'));
});

gulp.task('js', function () {
  return gulp.src('./scripts.js')
    .pipe(babel())
    .pipe(uglify())
    .pipe(rename({suffix: '.min'}))
    .pipe(gulp.dest('./docs/'));
});

gulp.task('json', function () {
  return gulp.src('./manifest.json')
    .pipe(gulp.dest('./docs/'));
});

gulp.task('images', function () {
  return gulp.src('./assets/*')
    .pipe(imagemin([
      imagemin.jpegtran({progressive: true}),
      imagemin.optipng({optimizationLevel: 10}),
      imagemin.svgo({
        plugins: [
          {removeViewBox: true},
          {cleanupIDs: false}
        ]
      }),
      imageminWebp({
        quality: 25
      })
    ]))
    .pipe(gulp.dest('./docs/assets/'));
});

gulp.task('what', function() {
  return gulp.src('./favicon.png')
    .pipe(gulp.dest('./docs/'));
});

gulp.task('clean', function () {
  return del(['docs/**/*']);
});

gulp.task('push', function() {
  return gulp.src('./docs/*')
    .pipe(git.add())
    .pipe(git.commit('Automated commit'))
    .pipe(git.push('origin', function (err) {
      if (err) throw err;
    }));
});

gulp.task('default', gulpSequence('clean', 'css', 'what', ['js', 'images', 'fonts', 'json', 'html']));
